/*
 * eFlight.c
 *
 * Created on: 5 may. 2022
 * Author: Alejandro Alberto Martín Rozas  - División H.
 * Esta bilioteca contiene las funciones de la estructura eFlights
 * Versión 1.0 del 13 de Mayo de 2022.
 * */

#include "Flight.h"

Flight* Flight_new()
{
	Flight* memoryPointer = NULL;
	memoryPointer = (Flight*) malloc(sizeof(Flight)*2);
	return memoryPointer;
}
Flight* Flight_newParametros(char* idStr, char* flycodeStr,char* codigoVueloStr)
{
	Flight* newFlight = Flight_new();
	if(idStr != NULL
			&& codigoVueloStr != NULL
			&& codigoVueloStr != NULL
			&& newFlight  != NULL)
	{
		if(	(Flight_setId(newFlight,atoi(idStr)) != 0) ||
				(Flight_setTipoPasajero(newFlight,atoi(codigoVueloStr)) != 0) ||
				(Flight_setCodigoVuelo(newFlight,(codigoVueloStr)) != 0))
		{
			Flight_delete(newFlight);
			newFlight = NULL;
			//printf("\nEmployee: direccion de memoria NULL");
		}
	}
	return newFlight;
}
void Flight_delete(Flight* this)
{
	free(this);
}
int Flight_setId(Flight* this,int id)
{
	int rtn = -1;
	if(this != NULL && id > 0)
	{
		this->idVuelo =id;
		//printf("\nid pasajero : %d",this->id);
		rtn = 0;
	}
	return rtn;
}
int Flight_getId(Flight* this,int* id)
{
	int rtn = -1;
	if(this != NULL &&  id != NULL)
	{
		*id = this->idVuelo;
		rtn = 0;
	}
	return rtn;
}
int Flight_setNombre(Flight* this,char* nombre)
{
	int rtn = -1;
	if(this != NULL && nombre != NULL)
	{
		strcpy(this->nombre,nombre);
		rtn = 0;
	}
	return rtn;
}
int Flight_getNombre(Flight* this,char* nombre)
{
	int rtn = -1;
	if(this != NULL &&  nombre != NULL)
	{
		strcpy(nombre,this->nombre);
		rtn = 0;
	}
	return rtn;
}
int Flight_setApellido(Flight* this,char* apellido)
{
	int rtn = -1;
	if(this != NULL && apellido != NULL)
	{
		strcpy(this->apellido,apellido);
		rtn = 0;
	}
	return rtn;
}
int Flight_getApellido(Flight* this,char* apellido)
{
	int rtn = -1;
	if(this != NULL &&  apellido != NULL)
	{
		strcpy(apellido,this->nombre);
		rtn = 0;
	}
	return rtn;
}
int Flight_setPrecio(Flight* this,float precio)
{
	int rtn = -1;
	if(this != NULL && precio > -1)
	{
		this->precio = precio;
		rtn = 0;
	}
	return rtn;
}
int Flight_getPrecio(Flight* this,float* precio)
{
	int rtn = -1;
	if(this != NULL &&  precio != NULL)
	{
		*precio = this->precio;
		rtn = 0;
	}
	return rtn;
}
int Flight_setTipoPasajero(Flight* this, int tipoPasajero)
{
	int rtn = -1;
	if(this != NULL && tipoPasajero > -1)
	{
		this->tipoPasajero = tipoPasajero;
		rtn = 0;
	}
	return rtn;
}
int Flight_getTipoPasajero(Flight* this, int* tipoPasajero)
{
	int rtn = -1;
	if(this != NULL &&  tipoPasajero != NULL)
	{
		*tipoPasajero = this->tipoPasajero;
		rtn = 0;
	}
	return rtn;
}
int Flight_setCodigoVuelo(Flight* this, char* codigoVuelo)
{
	int rtn = -1;
	if(this != NULL && codigoVuelo != NULL)
	{
		strcpy(this->codigoVuelo,codigoVuelo);
		rtn = 0;
	}
	return rtn;
}
int Flight_getCodigoVuelo(Flight* this,char* codigoVuelo)
{
	int rtn = -1;
	if(this != NULL &&  codigoVuelo != NULL)
	{
		strcpy(codigoVuelo,this->codigoVuelo);
		rtn = 0;
	}
	return rtn;
}
int Flight_setData(Flight* this)
{
	int rtn=-1;
	Flight FlightBuffer;
	int passengerTypeMenu;
	if(this!=NULL)
	{
		printf("\n\t\t\tCARGA DE PASAJERO\t\t\t");
		if(		input_getStringletters("INGRESE EL NOMBRE DEL PASAJERO:", RETRIES, "ERROR, INGRESE UN NOMBRE VALIDO:", FlightBuffer.nombre, NAME_LENGTH)== 0
				&& input_getStringletters("INGRESE EL APELLIDO DEL PASAJERO:", RETRIES, "ERROR, INGRESE UN APELLIDO VALIDO:", FlightBuffer.apellido, NAME_LENGTH) == 0
				&& input_getFloat("INGRESE EL PRECIO DEL VUELO:", RETRIES, MIN_PRICE, MAX_PRICE, "ERROR, INGRESE UN PRECIO VALIDO:", &FlightBuffer.precio) == 0)
		{
			passengerTypeMenu=menu_menu("ELIJA EL TIPO DE PASAJERO",
					"\n1 - EXECUTIVE_CLASS."
					"\n2 - FIRST CLASS."
					"\n3 - EXECUTIVE CLASS."
					,"ERROR INTENTE DE NUEVO"
					, RETRIES
					, 3);
			if(passengerTypeMenu!=-1)
			{
				switch (passengerTypeMenu)
				{
				case ECONOMY_CLASS:
					FlightBuffer.tipoPasajero=ECONOMY_CLASS;
					break;
				case FIRST_CLASS:
					FlightBuffer.tipoPasajero=FIRST_CLASS;
					break;
				case EXECUTIVE_CLASS:
					FlightBuffer.tipoPasajero=EXECUTIVE_CLASS;
					break;
				}
				if(Flight_setNombre(this, FlightBuffer.nombre)!=0 ||
						Flight_setApellido(this, FlightBuffer.apellido)!= 0 ||
						Flight_setPrecio(this, FlightBuffer.precio)!=0 ||
						Flight_setTipoPasajero(this, FlightBuffer.tipoPasajero)!= 0)
				{
					free(this);
					this = NULL;
				}
				else
				{
					rtn=0;
				}
			}
			else
			{
				rtn=-3;
			}
		}
		else
		{
			rtn=-2;
		}
	}
	return rtn;
}

