/*
 * Passenger.c
 *
 *  Created on: 19 may. 2022
 *      Author:
 */
#include "Passenger.h"

Passenger* Passenger_new()
{
	Passenger* memoryPointer = NULL;
	memoryPointer = (Passenger*) malloc(sizeof(Passenger)*2); //ESTA MULTIPLICACIÓN ES LO QUE ME ARREGLA EL ERROR, SIN ESA MULTIPLICACIÓN ME SALE EL ERROR: malloc(): corrupted top size

	return memoryPointer;
}
Passenger* Passenger_newParametros(char* idStr,char* nombreStr,char*apellidoStr,char* precioStr, char* tipoPasajeroStr, char* codigoVueloStr)
{
	Passenger* newPassenger = Passenger_new();
	if(idStr != NULL
			&& nombreStr != NULL
			&& tipoPasajeroStr != NULL
			&& apellidoStr != NULL
			&& codigoVueloStr != NULL
			&& tipoPasajeroStr != NULL
			&& precioStr != NULL
			&& newPassenger  != NULL)
	{
		if(	(Passenger_setId(newPassenger,atoi(idStr)) != 0) ||
				(Passenger_setNombre(newPassenger,nombreStr) != 0) ||
				(Passenger_setApellido(newPassenger,apellidoStr) != 0) ||
				(Passenger_setPrecio(newPassenger,atof(precioStr)) != 0) ||
				(Passenger_setTipoPasajero(newPassenger,tipoPasajeroStr) != 0) ||
				(Passenger_setCodigoVuelo(newPassenger,codigoVueloStr) != 0))
		{
			Passenger_delete(newPassenger);
			newPassenger = NULL;
			//printf("\nEmployee: direccion de memoria NULL");
		}
	}
	return newPassenger;
}
void Passenger_delete(Passenger* this)
{
	free(this);
}
int Passenger_setId(Passenger* this,int id)
{
	int rtn = -1;
	if(this != NULL && id > 0)
	{
		this->id =id;
		//printf("\nid pasajero : %d",this->id);
		rtn = 0;
	}
	return rtn;
}
int Passenger_getId(Passenger* this,int* id)
{
	int rtn = -1;
	if(this != NULL &&  id != NULL)
	{
		*id = this->id;
		rtn = 0;
	}
	return rtn;
}
int Passenger_setNombre(Passenger* this,char* nombre)
{
	int rtn = -1;
	if(this != NULL && nombre != NULL)
	{
		strcpy(this->nombre,nombre);
		rtn = 0;
	}
	return rtn;
}
int Passenger_getNombre(Passenger* this,char* nombre)
{
	int rtn = -1;
	if(this != NULL &&  nombre != NULL)
	{
		strcpy(nombre,this->nombre);
		rtn = 0;
	}
	return rtn;
}
int Passenger_setApellido(Passenger* this,char* apellido)
{
	int rtn = -1;
	if(this != NULL && apellido != NULL)
	{
		strcpy(this->apellido,apellido);
		rtn = 0;
	}
	return rtn;
}
int Passenger_getApellido(Passenger* this,char* apellido)
{
	int rtn = -1;
	if(this != NULL &&  apellido != NULL)
	{
		strcpy(apellido,this->apellido);
		rtn = 0;
	}
	return rtn;
}
int Passenger_setPrecio(Passenger* this,float precio)
{
	int rtn = -1;
	if(this != NULL && precio > -1)
	{
		this->precio = precio;
		rtn = 0;
	}
	return rtn;
}
int Passenger_getPrecio(Passenger* this,float* precio)
{
	int rtn = -1;
	if(this != NULL &&  precio != NULL)
	{
		*precio = this->precio;
		rtn = 0;
	}
	return rtn;
}
int Passenger_setTipoPasajero(Passenger* this, char* tipoPasajero)
{
	int rtn = -1;
	if(this != NULL && tipoPasajero != NULL)
	{
		strcpy(this->tipoPasajero,tipoPasajero);
		rtn = 0;
	}
	return rtn;
}
int Passenger_getTipoPasajero(Passenger* this, char* tipoPasajero)
{
	int rtn = -1;
	if(this != NULL &&  tipoPasajero != NULL)
	{
		strcpy(tipoPasajero,this->tipoPasajero);
		rtn = 0;
	}
	return rtn;
}
int Passenger_setCodigoVuelo(Passenger* this, char* codigoVuelo)
{
	int rtn = -1;
	if(this != NULL && codigoVuelo != NULL)
	{
		strcpy(this->codigoVuelo,codigoVuelo);
		rtn = 0;
	}
	return rtn;
}
int Passenger_getCodigoVuelo(Passenger* this,char* codigoVuelo)
{
	int rtn = -1;
	if(this != NULL &&  codigoVuelo != NULL)
	{
		strcpy(codigoVuelo,this->codigoVuelo);
		rtn = 0;
	}
	return rtn;
}
int Passenger_setData(Passenger* this)
{
	int rtn=-1;
	Passenger PassengerBuffer;
	int passengerTypeMenu;
	if(this!=NULL)
	{
		printf("\n\t\t\tCARGA DE PASAJERO\t\t\t");
		if(		input_getStringletters("INGRESE EL NOMBRE DEL PASAJERO:", RETRIES, "ERROR, INGRESE UN NOMBRE VALIDO:", PassengerBuffer.nombre, NAME_LENGTH)== 0
				&& input_getStringletters("INGRESE EL APELLIDO DEL PASAJERO:", RETRIES, "ERROR, INGRESE UN APELLIDO VALIDO:", PassengerBuffer.apellido, NAME_LENGTH) == 0
				&& input_getFloat("INGRESE EL PRECIO DEL VUELO:", RETRIES, MIN_PRICE, MAX_PRICE, "ERROR, INGRESE UN PRECIO VALIDO:", &PassengerBuffer.precio) == 0)
		{
			passengerTypeMenu=menu_menu("ELIJA EL TIPO DE PASAJERO",
					"\n1 - ECONOMY CLASS."
					"\n2 - FIRST CLASS."
					"\n3 - EXECUTIVE CLASS."
					,"ERROR INTENTE DE NUEVO"
					, RETRIES
					, 3);
			if(passengerTypeMenu!=-1)
			{
				switch (passengerTypeMenu)
				{
				case ECONOMY_CLASS:
					strcpy(PassengerBuffer.tipoPasajero,"ECONOMY CLASS");
					break;
				case FIRST_CLASS:
					strcpy(PassengerBuffer.tipoPasajero,"FIRST CLASS");
					break;
				case EXECUTIVE_CLASS:
					strcpy(PassengerBuffer.tipoPasajero,"EXECUTIVE CLASS");
					break;
				}
				if(Passenger_setNombre(this, PassengerBuffer.nombre)!=0 ||
						Passenger_setApellido(this, PassengerBuffer.apellido)!= 0 ||
						Passenger_setPrecio(this, PassengerBuffer.precio)!=0 ||
						Passenger_setTipoPasajero(this, PassengerBuffer.tipoPasajero)!= 0)
				{
					free(this);
					this = NULL;
				}
				else
				{
					rtn=0;
				}
			}
			else
			{
				rtn=-3;
			}
		}
		else
		{
			rtn=-2;
		}
	}
	return rtn;
}
int Passenger_sortById(void* pElementOne,void* pElementTwo)
{
	int bufferIdOne;
	int bufferIdTwo;
	int rtn = 0;
	if(pElementOne != NULL && pElementTwo != NULL)
	{
		Passenger_getId((Passenger*)pElementOne,&bufferIdOne);
		Passenger_getId((Passenger*)pElementTwo,&bufferIdTwo);
		if(bufferIdOne > bufferIdTwo)
		{
			rtn = 1;
		}
		else
		{
			if(bufferIdOne <bufferIdTwo)
			{
				rtn = -1;
			}
		}

	}
	return rtn;
}
int Passenger_sortByName(void* pElementOne,void* pElementTwo)
{
	int retorno = 0;
	Passenger* primero;
	Passenger* segundo;
	char valor1[NAME_LENGTH];
	char valor2[NAME_LENGTH];
	primero = (Passenger*) pElementOne;
	segundo = (Passenger*) pElementTwo;
	if(!Passenger_getNombre(primero, valor1) &&
		!Passenger_getNombre(segundo, valor2))
	{
		if(strncmp(valor1,valor2,NAME_LENGTH)>0)
		{
			retorno = -1;
		}
		else
		{
			retorno = 1;
		}
	}
	return retorno;

	/*Passenger* passengerBufferOne = NULL;
	Passenger* passengerBufferTwo = NULL;
	//char buffer
	int rtn = 0;
	if(pElementOne != NULL && pElementTwo != NULL)
	{
		passengerBufferOne = (Passenger*)pElementOne;
		passengerBufferTwo = (Passenger*)pElementTwo;
		rtn = (strcmp((*(passengerBufferOne)).nombre,(*(passengerBufferTwo)).nombre));
	}
	return rtn;*/
}//FIN sortByName_A_Z()
