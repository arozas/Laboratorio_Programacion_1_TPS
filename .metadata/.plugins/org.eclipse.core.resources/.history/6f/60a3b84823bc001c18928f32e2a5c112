/*
 * Input.c
 *
 *  Created on: 1 abr. 2022
 *      Author: Alejandro Alberto Martín Rozas
 *      Biblioteca de funciones de entrada.
 *      Versión 0.4 del 14 de abril de 2022
 */
#include "Input.h"
/// @fn int input_getInt(char[], int, int, int, char[], int*)
/// @brief 					Esta función solicita al usuario el ingreso de un entero validando el ingreso,
/// 						si no se encuentra entre los parametros vuelve a pedir el ingreso.

/// @param mensaje 			Es el mensaje que se le muestra al usuario para solicitar el numero.
/// @param reintentos 		Es la cantidad de reintentos que tendrá el usuario en el caso de que el dato ingresado no cumpla con los parametros.
/// @param minimo			Es el valor mínimo que puede ingresar el usuario.
/// @param maximo			Es el valor máximo que puede ingresar el usuario.
/// @param mensajeError		Es el mensaje de error que muestra la función si no pasó la validación el ingreso por el usuario.
/// @param pNumeroingresado	Es el puntero donde se guarda el valor ingresado por el usuario.
/// @return
int input_getInt(char mensaje[], int reintentos, int minimo, int maximo, char mensajeError[], int *pNumeroingresado)
{
	int rtn = 0;
	int auxiliarInt; //buffer
	int retornoScanf;
	//Revisar que todos los datos esten bien.
	if(mensaje != NULL && minimo < maximo && mensajeError != NULL && pNumeroingresado != NULL && reintentos >= 0)
	{
		printf("\n%s", mensaje);
		retornoScanf = scanf("%d", &auxiliarInt);
		do
		{
			if (retornoScanf !=1 || auxiliarInt > maximo || auxiliarInt < minimo)
			{
				printf("\n%s", mensajeError);
				retornoScanf = scanf("%d", &auxiliarInt);
				reintentos--;
			}
			else
			{
				reintentos = 0;
				*pNumeroingresado = auxiliarInt;
				rtn = 1;
			}
		}
		while(reintentos>0);
	}
	return rtn;
}
int input_getFloat(char mensaje[], int reintentos, int minimo, int maximo, char mensajeError[], float *pNumeroingresado)
{
	int rtn = 0;
	float auxiliarFloat; //buffer
	int retornoScanf;
	//Revisar que todos los datos esten bien.
	if(mensaje != NULL && minimo < maximo && mensajeError != NULL && pNumeroingresado != NULL && reintentos >= 0)
	{
		printf("\n%s", mensaje);
		retornoScanf = scanf("%f", &auxiliarFloat);
		do
		{
			if (retornoScanf !=1 || auxiliarFloat > maximo || auxiliarFloat < minimo)
			{
				printf("\n%s", mensajeError);
				retornoScanf = scanf("%f", &auxiliarFloat);
				reintentos--;
			}
			else
			{
				reintentos = 0;
				*pNumeroingresado = auxiliarFloat;
				rtn = 1;
			}
		}
		while(reintentos>0);
	}
	return rtn;
}
int input_getChar(char mensaje[], int reintentos, char minimo, char maximo, char mensajeError[], char *pCaracteringresado)
{
	int rtn = 0;
	char auxiliarChar; //buffer
	int retornoScanf;
	//Revisar que todos los datos esten bien.
	if(mensaje != NULL && minimo < maximo && mensajeError != NULL && pCaracteringresado != NULL && reintentos >= 0)
	{
		printf("\n%s", mensaje);
		retornoScanf = scanf("%c", &auxiliarChar);
		do
		{
			if (retornoScanf !=1 || auxiliarChar > maximo || auxiliarChar < minimo)
			{
				printf("\n%s", mensajeError);
				__fpurge(stdin);
				retornoScanf = scanf("%c", &auxiliarChar);
				reintentos--;
			}
			else
			{
				reintentos = 0;
				*pCaracteringresado = auxiliarChar;
				rtn = 1;
			}
		}
		while(reintentos>0);
	}
	return rtn;
}
int input_menuTwoOp(char nombreMenu[], char opcion1[], char opcion2[])
{
	int opcionIngresada;

	printf("\n\t\t\t%s\n",nombreMenu);
	printf("1. %s\n",opcion1);
	printf("2. %s\n",opcion2);
	if(input_getInt("INTRODUZCA OPCIÓN <1-2>:", 3, 1, 2, "ERROR INTRODUZCA OPCIÓN <1-2>", &opcionIngresada) == 1)
	{
		printf("\nOPCIÓN INGRESADA:%d\n",opcionIngresada);
	}
	else
	{
		printf("\nFALLO TODOS LOS INTENTOS\n");
	}

	return opcionIngresada;
}
int input_menuThreeOp(char nombreMenu[], char opcion1[], char opcion2[], char opcion3[])
{
	int opcionIngresada;

	printf("\n\t\t\t%s\n",nombreMenu);
	printf("1. %s\n",opcion1);
	printf("2. %s\n",opcion2);
	printf("3. %s\n",opcion3);
	if(input_getInt("INTRODUZCA OPCIÓN <1-3>:", 3, 1, 3, "ERROR INTRODUZCA OPCIÓN <1-3>", &opcionIngresada) == 1)
	{
		printf("\nOPCIÓN INGRESADA:%d\n",opcionIngresada);
	}
	else
	{
		printf("\nFALLO TODOS LOS INTENTOS\n");
	}

	return opcionIngresada;
}
int input_menuFourOp(char nombreMenu[], char opcion1[], char opcion2[], char opcion3[], char opcion4[])
{
	int opcionIngresada;

	printf("\n\t\t\t%s\n",nombreMenu);
	printf("1. %s\n",opcion1);
	printf("2. %s\n",opcion2);
	printf("3. %s\n",opcion3);
	printf("4. %s\n",opcion4);
	if(input_getInt("INTRODUZCA OPCIÓN <1-4>:", 3, 1, 4, "ERROR INTRODUZCA OPCIÓN <1-4>", &opcionIngresada) == 1)
	{
		printf("\nOPCIÓN INGRESADA:%d\n",opcionIngresada);
	}
	else
	{
		printf("\nFALLO TODOS LOS INTENTOS\n");
	}

	return opcionIngresada;
}
int input_menuFiveOp(char nombreMenu[], char opcion1[], char opcion2[], char opcion3[], char opcion4[], char opcion5[])
{
	int opcionIngresada;

	printf("\n\t\t\t%s\n",nombreMenu);
	printf("1. %s\n",opcion1);
	printf("2. %s\n",opcion2);
	printf("3. %s\n",opcion3);
	printf("4. %s\n",opcion4);
	printf("5. %s\n",opcion5);
	if(input_getInt("INTRODUZCA OPCIÓN <1-5>:", 3, 1, 5, "ERROR INTRODUZCA OPCIÓN <1-5>", &opcionIngresada) == 1)
	{
		printf("\nOPCIÓN INGRESADA:%d\n",opcionIngresada);
	}
	else
	{
		printf("\nFALLO TODOS LOS INTENTOS\n");
	}

	return opcionIngresada;
}
int input_menuSixOp(char nombreMenu[], char opcion1[], char opcion2[], char opcion3[], char opcion4[], char opcion5[], char opcion6[])
{
	int opcionIngresada;

	printf("\n\t\t\t%s\n",nombreMenu);
	printf("1. %s\n",opcion1);
	printf("2. %s\n",opcion2);
	printf("3. %s\n",opcion3);
	printf("4. %s\n",opcion4);
	printf("5. %s\n",opcion5);
	printf("6. %s\n",opcion6);
	if(input_getInt("INTRODUZCA OPCIÓN <1-6>:", 3, 1, 6, "ERROR INTRODUZCA OPCIÓN <1-6>", &opcionIngresada) == 1)
	{
		printf("\nOPCIÓN INGRESADA:%d\n",opcionIngresada);
	}
	else
	{
		printf("\nFALLO TODOS LOS INTENTOS\n");
	}

	return opcionIngresada;
}
void input_endProgram(void)
{
	printf("\n\t\t\tFINALIZÓ EL PROGRAMA");
	exit(-1);
}

